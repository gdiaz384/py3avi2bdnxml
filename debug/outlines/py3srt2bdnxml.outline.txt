file input (srt) to (BDN-XML/PNG format)

read input settings and set defaults  -done
read entire srt   -done
for each
-> build database for image width and height associated with each timecode
convert actual timecodes to BDN timecodes and place in XML tree -working on it
read text and get image file from file system
get image dimensions, clean file name and place in XML tree
(optional?) write new image
output xml file with completed:
--basic structure (UTF-8)
--first timecode read (BDN format)
--last timecode read (BDN format)
--total number of XML events
--target resolution (480p/720p/1080p)
--centered width  (formula: (source_frame_width-image_width)/2 = the number of x pixels to offset the image)
--y offset (formula: source_frame_height-image_height-number_of_pixels_from_bottom = the number
----number_of_pixels_from_bottom=2 pixels from bottom (default)
----or number_of_pixels_from_bottom that was specified by user

inputs specified:
-source file
->for calculating offsets
--quality (480p, 720p, 1080p)
-cut images(?)
-output filename for output.xml

requirements:
SRT produced by AVIsubDetector w/full file system paths to images
either source resolution or source quality

defaults:
-2 pixel offset from bottom
-720p quality

required logic:
outputs xml w/correct timecodes (incl first+last) + parsed file name + parsed width/height
file i/o    
-use "pysrt" by byroot to read srt file 
--https://github.com/byroot/pysrt
-use "Ch. 20 The ElementTree XML API" for XML building and related output
--https://docs.python.org/3.4/library/xml.etree.elementtree.html
image resolutions
-Pillow image library #pip uninstall pil; pip install Pillow
--https://pillow.readthedocs.io/en/3.0.x/handbook/tutorial.html#using-the-image-class
text reading
-Native python
time calculations
-PSL 16.3 time
--https://docs.python.org/3.4/library/time.html

convertToMS()
convertTimeToBDXML()
if last > lastWork
   set last=current


examples:
Defaults:
py3srt2bdnxml --infile myfile.srt --quality 480p --pixels-from-bottom 2

Hardsubs -> BD PGS image-based softsubs Workflow:
1. First, due to BD PGS limitations, make sure source video is in 16:9 480p, 720p, or 1080p
e.g. add letterboxing via AVIsynth's addborder(), spline64resize() and transcode if necessary
2. load .avi or .avs file with aviSubDetector (use 32-bit avisynth or avi2fs)
3. Use the following settings for aviSubDetector:
[picture 1]
[picture 2]
4. press "Start" and wait a while
5. When done, close AVIsubDetector
6. feed the resulting .srt into py3srt2bdnxml w/appropriate quality setting
7. feed the resulting .xml into [bdsup2sub++](bdsup2sub++1.0.2_win32.exe)
8. extend/delete/upscale and otherwise modify subs as necessary
9. export to SUP(BD) format (Preffered: Set Palette as "create new" filtered w/Lanczos3)
10. play target video matching the resolution specified w/MPC
11. File->Subtitles->Load Subtitles or ctrl+L or drag and drop output.sup onto video to test
12. Mux video.h264 and output.sup together using mkvtoolsnix (optional: specify a delay timing for syncing purposes)


Tips: Don't skip step #1.
Use --pixels-from-bottom to specify how far from the bottom the subs should be. Must be >=1 and < video height.
In bdsup2sup, it may be helpful to first get the --pixels-from-bottom offset correct 
by doing a test export prior to editing.

